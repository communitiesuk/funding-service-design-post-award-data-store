openapi: 3.0.0

info:
  title: data-store
  version: 1.0.0

paths:
  /download:
    get:
      operationId: core.controllers.download.download
      summary: Get monitoring and evaluation data from the data-store.
      description: Query the database with the provided parameters and serialise the resulting data in the specified format.
      tags:
        - main
      parameters:
        - in: query
          name: file_format
          description: file format of serialised data
          example: "xlsx"
          schema:
            type: string
            enum: [ json, xlsx ]
          required: true
        - in: query
          name: funds
          example: [ "HS" ]
          description: filter by fund ids
          schema:
            type: array
            items:
              type: string
        - in: query
          name: organisations
          example: [ "2a8baca6-5203-4fa5-be23-8b7797f111f7" ]
          description: filter by organisation (UUID)
          schema:
            type: array
            items:
              type: string
              format: uuid
        - in: query
          name: regions
          example: [ "TLC", "TLD", "TLK" ]
          description: filter by region (ITL code)
          schema:
            type: array
            items:
              type: string
        - in: query
          name: rp_start
          description: filter by reporting period start (ISO8601 format)
          example: "2023-04-01T00:00:00Z"
          schema:
            type: string
            format: date-time
        - in: query
          name: rp_end
          description: filter by reporting period end (ISO8601 format)
          example: "2024-03-31T00:00:00Z"
          schema:
            type: string
            format: date-time
        - in: query
          name: outcome_categories
          description: filter by outcome category
          example: [ "Transport" ]
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  file_content:
                    type: object
                    description: The file content in json format.
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: The file content in a binary format (e.g. XLSX).

  /ingest:
    post:
      operationId: core.controllers.ingest.ingest
      summary: Extracts, validates, and loads monitoring and evaluation data from an Excel file into the data-store.
      description: Takes an Excel file and validates it's structure and data types. Returns any validation errors that
        occur, otherwise the data is loaded into a database.
      tags:
        - main
      requestBody:
        description: Contains the binary file of data and the fund and reporting round it is for. Optionally can also
          contain any fields to check against (auth) and a boolean flag that states if the data should be just
          validated, or also loaded into the database (do_load, defaults to True).
        required: True
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                excel_file:
                  type: string
                  format: binary
                  description: The file to ingest containing monitoring and evaluation data (in a binary format)
                fund_name:
                  type: string
                  enum: [ "Towns Fund" ]
                  description: The name of the fund this data is for
                reporting_round:
                  type: integer
                  enum: [ 1, 2, 3, 4 ]
                  description: The reporting round this data is for
                auth:
                  type: string
                  format: json
                  description: JSON string; restrict ingest to submissions based on some fields in the data file.
                    e.g. Towns Fund checks against Place Name and Fund Type.
                  default: "{\"Place Names\": [\"Blackfriars - Northern City Centre\"], \"Fund Types\": [\"Town_Deal\", \"Future_High_Street_Fund\"]}"
                do_load:
                  description: If this is false, carry out all steps (including validation) but do not load the data to the db.
                  type: boolean
                  default: true

              required:
                - excel_file
                - fund_name
                - reporting_round

              example:
                type: object
                content: {
                  "excel_file": "somebytes",
                  "fund_name": "Towns Fund",
                  "reporting_round": 4,
                  "auth": "{\"Place Names\": [\"Blackfriars - Northern City Centre\"], \"Fund Types\": [\"Town_Deal\", \"Future_High_Street_Fund\"]}",
                  "do_load": "true"
                }

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  properties:
                    detail:
                      type: string
                    metadata:
                      type: object
                    title:
                      type: string
                    status:
                      type: integer
                      format: int32
                    loaded:
                      type: boolean
                example:
                  detail: "Spreadsheet successfully validated and ingested"
                  metadata:
                    programme: "Blackfriars - Northern City Centre"
                    fund_type: "HS"
                  status: 200
                  title: "success"
                  loaded: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/PreTransformationError'
                  - $ref: '#/components/schemas/GeneralError'
              examples:
                ValidationError:
                  $ref: '#/components/examples/ValidationErrorExample'
                PreTransformationError:
                  $ref: '#/components/examples/PreTransformationErrorExample'
                BadRequest:
                  $ref: '#/components/examples/BadRequestExample'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/GeneralError'
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      internal_errors:
                        type: array
                        items:
                          type: string
              example:
                value:
                  detail: "Internal Ingestion Error"
                  status: 500
                  title: "Internal Server Error"
                  type: "about:blank"
                  id: "0fcdb25c-e7e8-4850-944f-4b5c3a060789"
                  internal_errors: [ "Failure: Some failure", "Failure: Another failure" ]

  /organisations:
    get:
      summary: Returns a list of all distinct organisation names.
      operationId: core.controllers.get_filters.get_organisation_names
      tags:
        - filters
      responses:
        '200':
          description: The names of all organisations and UUID
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    id:
                      type: string
                example:
                  - name: "Example Organisation"
                    id: "12345678-1234-1234-1234-123456789abc"
                  - name: "Example Organisation2"
                    id: "12345678-1234-1234-1234-123456789cba"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'

  /funds:
    get:
      summary: Returns a list of all distinct funds.
      operationId: core.controllers.get_filters.get_funds
      tags:
        - filters
      responses:
        '200':
          description: The names of all funds and their IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    id:
                      type: string
                example:
                  - name: "Example Fund"
                    id: "EF"
                  - name: "Another Example Fund"
                    id: "AEF"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'

  /outcome-categories:
    get:
      summary: Returns a list of all distinct outcome categories.
      operationId: core.controllers.get_filters.get_outcome_categories
      tags:
        - filters
      responses:
        '200':
          description: The names of all outcome categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: [ "Transport", "Culture", "Economy" ]
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'

  /regions:
    get:
      summary: Returns a list of all distinct ITL regions as codes.
      operationId: core.controllers.get_filters.get_regions
      tags:
        - filters
      responses:
        '200':
          description: The codes for all distinct ITL regions.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: [ "TLC", "TLD", "TLK" ]
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'

  /reporting-period-range:
    get:
      summary: Returns the start and end date reporting period in date-time format e.g. 2025-06-30T00:00:00Z
      operationId: core.controllers.get_filters.get_reporting_period_range
      tags:
        - filters
      responses:
        '200':
          description: Returns the earliest reporting period start date and the latest reporting period end date in the data
          content:
            application/json:
              schema:
                type: object
                properties:
                  start_date:
                    type: string
                    format: date-time
                    example: 2021-06-01T00:00:00Z
                  end_date:
                    type: string
                    format: date-time
                    example: 2025-06-30T00:00:00Z
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'

  /retrieve_submission_file:
    get:
      operationId: core.controllers.retrieve_submission_file.retrieve_submission_file
      summary: Retrieve original submission files from S3 by Submission ID.
      description: Looks up a Submission by Submission ID and returns the resulting original submission file.
      tags:
        - utils
      parameters:
        - in: query
          name: submission_id
          example: "S-R04-1"
          schema:
            type: string
          required: true
          description: The submission id of the submission.
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: The file content in a binary format.

  /retrieve_submission_file_db:
    get:
      operationId: core.controllers.retrieve_submission_file_db.retrieve_submission_file_db
      summary: Retrieve original submission files from the data-store by Submission ID.
      description: Looks up a Submission by Submission ID and returns the resulting original submission file.
      tags:
        - utils
      parameters:
        - in: query
          name: submission_id
          example: "S-R04-1"
          schema:
            type: string
          required: true
          description: The submission id of the submission.
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: The file content in a binary format.

  /failed-submission/{failure_uuid}:
    get:
      summary: Returns a failed submission from S3 storage that matches the provided failure id.
      operationId: core.controllers.failed_submission.get_failed_submission
      tags:
        - utils
      parameters:
        - in: path
          name: failure_uuid
          required: true
          schema:
            type: string
            format: uuid
          description: The failure id corresponding to the failed submission to retrieve.
      responses:
        '200':
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'

components:
  schemas:
    GeneralError:
      type: object
      properties:
        detail:
          type: string
        title:
          type: string
        status:
          type: integer
          format: int32
        type:
          type: string

    PreTransformationError:
      allOf:
        - $ref: '#/components/schemas/GeneralError'
      properties:
        validation_errors:
          type: object
          properties:
            PreTransformationErrors:
              type: array
              items:
                type: string
      example:
        $ref: "#/components/examples/PreTransformationErrorExample"

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/GeneralError'
      properties:
        validation_errors:
          type: array
          items:
            type: object
            properties:
              sheet:
                type: string
              section:
                type: string
              cell:
                type: string
              description:
                type: string
              error_type:
                type: string
      example:
        $ref: "#/components/examples/ValidationErrorExample"

  examples:
    ValidationErrorExample:
      value:
        detail: "Workbook validation failed"
        validation_errors:
          - tab: "Tab1"
            section: "Tab Section 1"
            cell: "A1"
            description: "Error message 1"
            error_type: "WrongInputFailure"
        status: "400"
        title: "Bad Request"

    PreTransformationErrorExample:
      value:
        detail: "Workbook validation failed"
        validation_errors:
          PreTransformationErrors:
            - "Error Message 1"
            - "Error Message 2"
        status: 400
        title: "Bad Request"

    BadRequestExample:
      value:
        detail: "Invalid file type"
        status: 400
        title: "Bad Request"
        type: "about:blank"
