"""empty message

Revision ID: 011_event_data_to_jsonb
Revises: 010_programme_junction
Create Date: 2024-02-16 11:13:25.470836

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "011_event_data_to_jsonb"
down_revision = "010_programme_junction"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # PROJECT PROGRESS #
    with op.batch_alter_table("project_progress", schema=None) as batch_op:
        batch_op.add_column(sa.Column("event_data_blob", postgresql.JSONB(astext_type=sa.Text()), nullable=True))

    op.execute(
        """
            UPDATE project_progress
            SET event_data_blob = jsonb_build_object(
                'delivery_status', delivery_status,
                'delivery_rag', delivery_rag,
                'spend_rag', spend_rag,
                'important_milestone', important_milestone,
                'risk_rag', risk_rag,
                'commentary', commentary,
                'delivery_stage', delivery_stage,
                'leading_factor_of_delay', leading_factor_of_delay,
                'adjustment_request_status', adjustment_request_status
            )
        """
    )

    with op.batch_alter_table("project_progress", schema=None) as batch_op:
        batch_op.drop_column("delivery_status")
        batch_op.drop_column("delivery_rag")
        batch_op.drop_column("spend_rag")
        batch_op.drop_column("important_milestone")
        batch_op.drop_column("risk_rag")
        batch_op.drop_column("commentary")
        batch_op.drop_column("delivery_stage")
        batch_op.drop_column("leading_factor_of_delay")
        batch_op.drop_column("adjustment_request_status")

    # FUNDING #
    with op.batch_alter_table("funding", schema=None) as batch_op:
        batch_op.add_column(sa.Column("event_data_blob", postgresql.JSONB(astext_type=sa.Text()), nullable=True))

    op.execute(
        """
            UPDATE funding
            SET event_data_blob = jsonb_build_object(
                'funding_source_name', funding_source_name,
                'funding_source_type', funding_source_type,
                'secured', secured,
                'spend_for_reporting_period', spend_for_reporting_period,
                'status', status,
            )
        """
    )

    with op.batch_alter_table("funding", schema=None) as batch_op:
        batch_op.drop_column("funding_source_name")
        batch_op.drop_column("funding_source_type")
        batch_op.drop_column("secured")
        batch_op.drop_column("spend_for_reporting_period")
        batch_op.drop_column("status")

    # FUNDING COMMENT #
    with op.batch_alter_table("funding_comment", schema=None) as batch_op:
        batch_op.add_column(sa.Column("event_data_blob", postgresql.JSONB(astext_type=sa.Text()), nullable=True))

    op.execute(
        """
            UPDATE funding_comment
            SET event_data_blob = jsonb_build_object(
                'comment', comment,
            )
        """
    )

    with op.batch_alter_table("funding_comment", schema=None) as batch_op:
        batch_op.drop_column("comment")

    # PRIVATE INVESTMENT #
    with op.batch_alter_table("private_investment", schema=None) as batch_op:
        batch_op.add_column(sa.Column("event_data_blob", postgresql.JSONB(astext_type=sa.Text()), nullable=True))

    op.execute(
        """
            UPDATE private_investment
            SET event_data_blob = jsonb_build_object(
                'total_project_value', total_project_value,
                'townsfund_funding', townsfund_funding,
                'private_sector_funding_required', private_sector_funding_required,
                'private_sector_funding_secured', private_sector_funding_secured,
                'additional_comments', additional_comments,
            )
        """
    )

    with op.batch_alter_table("private_investment", schema=None) as batch_op:
        batch_op.drop_column("total_project_value")
        batch_op.drop_column("townsfund_funding")
        batch_op.drop_column("private_sector_funding_required")
        batch_op.drop_column("private_sector_funding_secured")
        batch_op.drop_column("additional_comments")

    # RISK REGISTER #
    with op.batch_alter_table("risk_register", schema=None) as batch_op:
        batch_op.add_column(sa.Column("event_data_blob", postgresql.JSONB(astext_type=sa.Text()), nullable=True))

    op.execute(
        """
            UPDATE risk_register
            SET event_data_blob = jsonb_build_object(
                'risk_name', risk_name,
                'risk_category', risk_category,
                'short_desc', short_desc,
                'full_desc', full_desc,
                'consequences', consequences,
                'pre_mitigated_impact ', pre_mitigated_impact ,
                'pre_mitigated_likelihood', pre_mitigated_likelihood,
                'mitigations', mitigations,
                'post_mitigated_impact', post_mitigated_impact,
                'post_mitigated_likelihood', post_mitigated_likelihood,
                'proximity', proximity,
                'risk_owner_role', risk_owner_role,
            )
        """
    )

    with op.batch_alter_table("risk_register", schema=None) as batch_op:
        batch_op.drop_column("risk_name")
        batch_op.drop_column("risk_category")
        batch_op.drop_column("short_desc")
        batch_op.drop_column("full_desc")
        batch_op.drop_column("consequences")
        batch_op.drop_column("pre_mitigated_impact ")
        batch_op.drop_column("pre_mitigated_likelihood")
        batch_op.drop_column("mitigations")
        batch_op.drop_column("post_mitigated_impact")
        batch_op.drop_column("post_mitigated_likelihood")
        batch_op.drop_column("proximity")
        batch_op.drop_column("risk_owner_role")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # PROJECT PROGRESS #
    with op.batch_alter_table("project_progress", schema=None) as batch_op:
        batch_op.add_column(sa.Column("adjustment_request_status", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("leading_factor_of_delay", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("delivery_stage", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("commentary", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("risk_rag", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("important_milestone", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("spend_rag", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("delivery_rag", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("delivery_status", sa.VARCHAR(), autoincrement=False, nullable=True))

    op.execute(
        """
            UPDATE project_progress
            SET
                delivery_status = (event_data_blob ->> 'delivery_status')::VARCHAR,
                delivery_rag = (event_data_blob ->> 'delivery_rag')::VARCHAR,
                spend_rag = (event_data_blob ->> 'spend_rag')::VARCHAR,
                important_milestone = (event_data_blob ->> 'important_milestone')::VARCHAR,
                risk_rag = (event_data_blob ->> 'risk_rag')::VARCHAR,
                commentary = (event_data_blob ->> 'commentary')::VARCHAR,
                delivery_stage = (event_data_blob ->> 'delivery_stage')::VARCHAR,
                leading_factor_of_delay = (event_data_blob ->> 'leading_factor_of_delay')::VARCHAR,
                adjustment_request_status = (event_data_blob ->> 'adjustment_request_status')::VARCHAR
        """
    )

    with op.batch_alter_table("project_progress", schema=None) as batch_op:
        batch_op.drop_column("event_data_blob")

    # FUNDING #
    with op.batch_alter_table("funding", schema=None) as batch_op:
        batch_op.add_column(sa.Column("funding_source_name", sa.VARCHAR(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column("funding_source_type", sa.VARCHAR(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column("secured", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("spend_for_reporting_period", sa.FLOAT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=True))

    op.execute(
        """
            UPDATE funding
            SET
                funding_source_name = (event_data_blob ->> 'funding_source_name')::VARCHAR,
                funding_source_type = (event_data_blob ->> 'funding_source_type')::VARCHAR,
                secured = (event_data_blob ->> 'secured')::VARCHAR,
                spend_for_reporting_period = (event_data_blob ->> 'spend_for_reporting_period')::FLOAT,
                status = (event_data_blob ->> 'status')::VARCHAR,
        """
    )

    with op.batch_alter_table("funding", schema=None) as batch_op:
        batch_op.drop_column("event_data_blob")

    # FUNDING COMMENT #
    with op.batch_alter_table("funding_comment", schema=None) as batch_op:
        batch_op.add_column(sa.Column("comment", sa.VARCHAR(), autoincrement=False, nullable=True))

    op.execute(
        """
            UPDATE funding_comment
            SET
                comment = (event_data_blob ->> 'comment')::VARCHAR,
        """
    )

    with op.batch_alter_table("funding_comment", schema=None) as batch_op:
        batch_op.drop_column("event_data_blob")

    # PRIVATE INVESTMENT #
    with op.batch_alter_table("private_investment", schema=None) as batch_op:
        batch_op.add_column(sa.Column("total_project_value", sa.FLOAT(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column("townsfund_funding", sa.FLOAT(), autoincrement=False, nullable=False))
        batch_op.add_column(
            sa.Column("private_sector_funding_required", sa.FLOAT(), autoincrement=False, nullable=True)
        )
        batch_op.add_column(sa.Column("private_sector_funding_secured", sa.FLOAT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("additional_comments", sa.VARCHAR(), autoincrement=False, nullable=True))

    op.execute(
        """
            UPDATE private_investment
            SET
                total_project_value = (event_data_blob ->> 'total_project_value')::FLOAT,
                townsfund_funding = (event_data_blob ->> 'townsfund_funding')::FLOAT,
                private_sector_funding_required = (event_data_blob ->> 'private_sector_funding_required')::FLOAT,
                private_sector_funding_secured = (event_data_blob ->> 'private_sector_funding_secured')::FLOAT,
                additional_comments = (event_data_blob ->> 'additional_comments')::VARCHAR,
        """
    )

    with op.batch_alter_table("private_investment", schema=None) as batch_op:
        batch_op.drop_column("event_data_blob")

    # RISK REGISTER #
    with op.batch_alter_table("risk_register", schema=None) as batch_op:
        batch_op.add_column(sa.Column("risk_name", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("risk_category", sa.VARCHAR(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column("short_desc", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("full_desc", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("consequences", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("pre_mitigated_impact", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("pre_mitigated_likelihood", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("mitigations", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("post_mitigated_impact", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("post_mitigated_likelihood", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("proximity", sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column("risk_owner_role", sa.VARCHAR(), autoincrement=False, nullable=True))

    op.execute(
        """
            UPDATE risk_register
            SET
                risk_name = (event_data_blob ->> 'risk_name')::VARCHAR,
                risk_category = (event_data_blob ->> 'risk_category')::VARCHAR,
                short_desc = (event_data_blob ->> 'short_desc')::VARCHAR,
                full_desc = (event_data_blob ->> 'full_desc')::VARCHAR,
                consequences = (event_data_blob ->> 'consequences')::VARCHAR,
                pre_mitigated_impact = (event_data_blob ->> 'pre_mitigated_impact')::VARCHAR,
                pre_mitigated_likelihood = (event_data_blob ->> 'pre_mitigated_likelihood')::VARCHAR,
                mitigations = (event_data_blob ->> 'mitigations')::VARCHAR,
                post_mitigated_impact = (event_data_blob ->> 'post_mitigated_impact')::VARCHAR,
                post_mitigated_likelihood = (event_data_blob ->> 'post_mitigated_likelihood')::VARCHAR,
                proximity = (event_data_blob ->> 'proximity')::VARCHAR,
                risk_owner_role = (event_data_blob ->> 'risk_owner_role')::VARCHAR,

        """
    )

    with op.batch_alter_table("risk_register", schema=None) as batch_op:
        batch_op.drop_column("event_data_blob")

    # ### end Alembic commands ###
