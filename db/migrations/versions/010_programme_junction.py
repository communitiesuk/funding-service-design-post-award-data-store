"""
This major structure and data migration adds in the new ProgrammeJunction junction table, re-routes all FK's to
Programme through this table and deprecates redundant FK's.

In Detail the migration does the following:

- Creates a new DB table "programme_junction"
- Adds indexes for joins etc
- Populates this table (Data migration). Sets FK's to Submission and Programme via:
    - ORM method to generate rows based on submission id
    - Raw SQL to look up the project.programme_id since this reference removed from the ORM
    - Make FK columns non-nullable
- Adds new column to project_dim for FK to programme_junction (temporarily nullable)
- Adds a programme_junction row for each submission (1:1 mapping), using lookups to programme FK via existing mapping
  through project.
- Adds the FK to rows in table project_dim for new programme_junction FK column, using lookup/matching of programme
  FK's.
- Alter project_dim column programme_junction_id to non-nullable. Create new compound indexes with new column
  (replicating pattern of existing indexes)
- Remove old FK's and indexes from project_dim (previously referencing programme/submission)
- For "event data" tables currently mapped at programme level (funding_question, place_detail, programme_progress):
    - Add new column for FK to programme_junction (temporarily nullable)
    - Add FK to column for each row, based on lookups/matching through programme_id.
    - Make new column non-nullable. Add indexes etc.
    - Remove old FK references and corresponding indexes to programme/submission
- For "event data" tables currently mapped to both programme and project level (outcome_data, risk_register):
    - Add new column for FK to programme_junction (nullable)
    - Add FK to column for each row, based on lookups/matching through programme_id ONLY IF this FK already exists.
    - Add indexes etc.
    - Update project FK's to have cascade on delete
    - Remove old FK references and corresponding indexes to programme/submission
- For "event data" tables mapped at project level:
    - Update project FK's to have cascade on delete
    - Remove old FK references and corresponding indexes to submission

- Commit changes at the end only (keep the migration Atomic)

Downgrade removes new indexes, drops new columns and tables.

Revision ID: 010_programme_junction
Revises: 009_postcode_as_array
Create Date: 2023-12-15 14:39:28.144506



"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy import orm, text

import core
from core.db.entities import ProgrammeJunction, Submission

# revision identifiers, used by Alembic.
revision = "010_programme_junction"
down_revision = "009_postcode_as_array"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # TODO: potentially add a op.execute to drop any programmes without children?
    connection = op.get_bind()
    session = orm.Session(bind=connection)

    op.create_table(
        "programme_junction",
        sa.Column("submission_id", core.db.types.GUID(), nullable=False),
        sa.Column("programme_id", core.db.types.GUID(), nullable=True),
        sa.Column("id", core.db.types.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["programme_id"], ["programme_dim.id"], name=op.f("fk_programme_junction_programme_id_programme_dim")
        ),
        sa.ForeignKeyConstraint(
            ["submission_id"],
            ["submission_dim.id"],
            name=op.f("fk_programme_junction_submission_id_submission_dim"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_programme_junction")),
        sa.UniqueConstraint("submission_id", name=op.f("uq_programme_junction_submission_id")),
    )
    with op.batch_alter_table("programme_junction", schema=None) as batch_op:
        batch_op.create_index("ix_programme_junction_join_programme", ["programme_id"], unique=False)
        batch_op.create_index("ix_programme_junction_join_submission", ["submission_id"], unique=False)

    with op.batch_alter_table("project_dim", schema=None) as batch_op:
        batch_op.add_column(sa.Column("programme_junction_id", core.db.types.GUID(), nullable=True))

    # for each submission, add a programme junction row (1:1), then find the programme PK via a lookup to any project,
    # and add this as FK to corresponding (new) row in junction table.
    for submission in session.query(Submission):
        programme_junction_row = ProgrammeJunction(
            submission_id=submission.id,
        )
        session.add(programme_junction_row)
    session.flush()

    # Need to use raw text as ORM attributes for programme have been removed in code (but not applied to DB yet)
    sql_query = text(
        """
        UPDATE programme_junction
        SET programme_id = (
            SELECT p.programme_id
            FROM project_dim p
            JOIN submission_dim s ON s.id = p.submission_id
            WHERE programme_junction.submission_id = s.id
            LIMIT 1
        );
        """
    )
    connection.execute(sql_query)

    with op.batch_alter_table("programme_junction", schema=None) as batch_op:
        batch_op.alter_column("programme_id", existing_type=core.db.types.GUID(), nullable=False)

    # for each project, lookup it's parent programme's id, then add reference to the programme_junction with the
    # matching programme_id in it's FK to programme_dim

    # Need to use raw text as ORM attributes for programme have been removed in code (but not applied to DB yet)
    sql_query = text(
        """
        UPDATE project_dim
        SET programme_junction_id = (
            SELECT id
            FROM programme_junction
            WHERE programme_id = project_dim.programme_id
            LIMIT 1
        );
        """
    )
    connection.execute(sql_query)

    with op.batch_alter_table("project_dim", schema=None) as batch_op:
        batch_op.alter_column("programme_junction_id", existing_type=core.db.types.GUID(), nullable=False)
        batch_op.create_index("ix_project_join_programme_junction", ["programme_junction_id"], unique=False)
        batch_op.create_index("ix_unique_project_per_return_dim", ["programme_junction_id", "project_id"], unique=True)
        batch_op.create_foreign_key(
            batch_op.f("fk_project_dim_programme_junction_id_programme_junction"),
            "programme_junction",
            ["programme_junction_id"],
            ["id"],
            ondelete="CASCADE",
        )
        # Remove old FK structure
        batch_op.drop_index("ix_project_join_programme")
        batch_op.drop_index("ix_project_join_submission")
        batch_op.drop_index("ix_unique_project_dim")
        batch_op.drop_constraint("fk_project_dim_submission_id_submission_dim", type_="foreignkey")
        batch_op.drop_constraint("fk_project_dim_programme_id_programme_dim", type_="foreignkey")
        batch_op.drop_column("programme_id")
        batch_op.drop_column("submission_id")

    # "Programme level" Event Data tables:

    with op.batch_alter_table("funding_question", schema=None) as batch_op:
        batch_op.add_column(sa.Column("programme_junction_id", core.db.types.GUID(), nullable=True))

    # Need to use raw text as ORM attributes for programme have been removed in code (but not applied to DB yet)
    sql_query = text(
        """
        UPDATE funding_question
        SET programme_junction_id = (
            SELECT id
            FROM programme_junction
            WHERE programme_id = funding_question.programme_id
            LIMIT 1
        );
        """
    )
    connection.execute(sql_query)

    with op.batch_alter_table("funding_question", schema=None) as batch_op:
        batch_op.alter_column("programme_junction_id", existing_type=core.db.types.GUID(), nullable=False)
        batch_op.create_index("ix_funding_question_join_programme_junction", ["programme_junction_id"], unique=False)
        batch_op.create_index(
            "ix_unique_funding_question_per_submission", ["programme_junction_id", "question", "indicator"], unique=True
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_funding_question_programme_junction_id_programme_junction"),
            "programme_junction",
            ["programme_junction_id"],
            ["id"],
            ondelete="CASCADE",
        )
        # Remove old FK structure
        batch_op.drop_index("ix_funding_question_join_programme")
        batch_op.drop_index("ix_funding_question_join_submission")
        batch_op.drop_index("ix_unique_funding_question")
        batch_op.drop_constraint("fk_funding_question_submission_id_submission_dim", type_="foreignkey")
        batch_op.drop_constraint("fk_funding_question_programme_id_programme_dim", type_="foreignkey")
        batch_op.drop_column("programme_id")
        batch_op.drop_column("submission_id")

    with op.batch_alter_table("place_detail", schema=None) as batch_op:
        batch_op.add_column(sa.Column("programme_junction_id", core.db.types.GUID(), nullable=True))

    # Need to use raw text as ORM attributes for programme have been removed in code (but not applied to DB yet)
    sql_query = text(
        """
        UPDATE place_detail
        SET programme_junction_id = (
            SELECT id
            FROM programme_junction
            WHERE programme_id = place_detail.programme_id
            LIMIT 1
        );
        """
    )
    connection.execute(sql_query)

    with op.batch_alter_table("place_detail", schema=None) as batch_op:
        batch_op.alter_column("programme_junction_id", existing_type=core.db.types.GUID(), nullable=False)
        batch_op.create_index("ix_place_detail_join_programme_junction", ["programme_junction_id"], unique=False)
        batch_op.create_index(
            "ix_unique_place_detail_per_submission", ["programme_junction_id", "question", "indicator"], unique=True
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_place_detail_programme_junction_id_programme_junction"),
            "programme_junction",
            ["programme_junction_id"],
            ["id"],
            ondelete="CASCADE",
        )
        # Remove old FK structure
        batch_op.drop_index("ix_place_detail_join_programme")
        batch_op.drop_index("ix_place_detail_join_submission")
        batch_op.drop_index("ix_unique_place_detail")
        batch_op.drop_constraint("fk_place_detail_programme_id_programme_dim", type_="foreignkey")
        batch_op.drop_constraint("fk_place_detail_submission_id_submission_dim", type_="foreignkey")
        batch_op.drop_column("programme_id")
        batch_op.drop_column("submission_id")

    with op.batch_alter_table("programme_progress", schema=None) as batch_op:
        batch_op.add_column(sa.Column("programme_junction_id", core.db.types.GUID(), nullable=True))

    # Need to use raw text as ORM attributes for programme have been removed in code (but not applied to DB yet)
    sql_query = text(
        """
        UPDATE programme_progress
        SET programme_junction_id = (
            SELECT id
            FROM programme_junction
            WHERE programme_id = programme_progress.programme_id
            LIMIT 1
        );
        """
    )
    connection.execute(sql_query)

    with op.batch_alter_table("programme_progress", schema=None) as batch_op:
        batch_op.alter_column("programme_junction_id", existing_type=core.db.types.GUID(), nullable=False)
        batch_op.create_index("ix_programme_progress_join_programme_junction", ["programme_junction_id"], unique=False)
        batch_op.create_index(
            "ix_unique_programme_progress_per_submission", ["programme_junction_id", "question"], unique=True
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_programme_progress_programme_junction_id_programme_junction"),
            "programme_junction",
            ["programme_junction_id"],
            ["id"],
            ondelete="CASCADE",
        )
        # Remove old FK structure
        batch_op.drop_index("ix_programme_progress_join_programme")
        batch_op.drop_index("ix_programme_progress_join_submission")
        batch_op.drop_index("ix_unique_programme_progress")
        batch_op.drop_constraint("fk_programme_progress_submission_id_submission_dim", type_="foreignkey")
        batch_op.drop_constraint("fk_programme_progress_programme_id_programme_dim", type_="foreignkey")
        batch_op.drop_column("programme_id")
        batch_op.drop_column("submission_id")

    # Mixed "Programme and/or Project level" Event Data tables:

    with op.batch_alter_table("outcome_data", schema=None) as batch_op:
        batch_op.add_column(sa.Column("programme_junction_id", core.db.types.GUID(), nullable=True))

    # Need to use raw text as ORM attributes for programme have been removed in code (but not applied to DB yet)
    sql_query = text(
        """
        UPDATE outcome_data
        SET programme_junction_id = (
            SELECT id
            FROM programme_junction
            WHERE programme_id = outcome_data.programme_id
            LIMIT 1
        );
        """
    )
    connection.execute(sql_query)

    with op.batch_alter_table("outcome_data", schema=None) as batch_op:
        batch_op.create_index("ix_outcome_join_programme_junction", ["programme_junction_id"], unique=False)
        batch_op.create_foreign_key(
            batch_op.f("fk_outcome_data_programme_junction_id_programme_junction"),
            "programme_junction",
            ["programme_junction_id"],
            ["id"],
            ondelete="CASCADE",
        )
        batch_op.drop_constraint("fk_outcome_data_project_id_project_dim", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_outcome_data_project_id_project_dim"),
            "project_dim",
            ["project_id"],
            ["id"],
            ondelete="CASCADE",
        )
        # Remove old FK structure
        batch_op.drop_index("ix_outcome_join_programme")
        batch_op.drop_index("ix_outcome_join_submission")
        batch_op.drop_index("ix_unique_outcome")
        batch_op.drop_constraint("fk_outcome_data_submission_id_submission_dim", type_="foreignkey")
        batch_op.drop_constraint("fk_outcome_data_programme_id_programme_dim", type_="foreignkey")
        batch_op.drop_column("programme_id")
        batch_op.drop_column("submission_id")

    with op.batch_alter_table("risk_register", schema=None) as batch_op:
        batch_op.add_column(sa.Column("programme_junction_id", core.db.types.GUID(), nullable=True))

    # Need to use raw text as ORM attributes for programme have been removed in code (but not applied to DB yet)
    sql_query = text(
        """
        UPDATE risk_register
        SET programme_junction_id = (
            SELECT id
            FROM programme_junction
            WHERE programme_id = risk_register.programme_id
            LIMIT 1
        );
        """
    )
    connection.execute(sql_query)

    with op.batch_alter_table("risk_register", schema=None) as batch_op:
        batch_op.create_index("ix_risk_register_join_programme_junction", ["programme_junction_id"], unique=False)
        batch_op.create_foreign_key(
            batch_op.f("fk_risk_register_programme_junction_id_programme_junction"),
            "programme_junction",
            ["programme_junction_id"],
            ["id"],
            ondelete="CASCADE",
        )
        batch_op.drop_constraint("fk_risk_register_project_id_project_dim", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_risk_register_project_id_project_dim"),
            "project_dim",
            ["project_id"],
            ["id"],
            ondelete="CASCADE",
        )
        # Remove old FK structure
        batch_op.drop_index("ix_risk_register_join_programme")
        batch_op.drop_index("ix_risk_register_join_submission")
        batch_op.drop_index("ix_unique_risk_register")
        batch_op.drop_constraint("fk_risk_register_submission_id_submission_dim", type_="foreignkey")
        batch_op.drop_constraint("fk_risk_register_programme_id_programme_dim", type_="foreignkey")
        batch_op.drop_column("programme_id")
        batch_op.drop_column("submission_id")

    # Update FK's ondelete behaviour for "project level" event data tables

    with op.batch_alter_table("funding", schema=None) as batch_op:
        batch_op.drop_constraint("fk_funding_project_id_project_dim", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_funding_project_id_project_dim"), "project_dim", ["project_id"], ["id"], ondelete="CASCADE"
        )
        # Remove old FK structure
        batch_op.drop_index("ix_funding_join_submission")
        batch_op.drop_index("ix_unique_funding")
        batch_op.drop_constraint("fk_funding_submission_id_submission_dim", type_="foreignkey")
        batch_op.drop_column("submission_id")

    with op.batch_alter_table("funding_comment", schema=None) as batch_op:
        batch_op.drop_constraint("fk_funding_comment_project_id_project_dim", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_funding_comment_project_id_project_dim"),
            "project_dim",
            ["project_id"],
            ["id"],
            ondelete="CASCADE",
        )
        # Remove old FK structure
        batch_op.drop_index("ix_funding_comment_join_submission")
        batch_op.drop_index("ix_unique_funding_comment")
        batch_op.drop_constraint("fk_funding_comment_submission_id_submission_dim", type_="foreignkey")
        batch_op.drop_column("submission_id")

    with op.batch_alter_table("output_data", schema=None) as batch_op:
        batch_op.drop_constraint("fk_output_data_project_id_project_dim", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_output_data_project_id_project_dim"),
            "project_dim",
            ["project_id"],
            ["id"],
            ondelete="CASCADE",
        )
        # Remove old FK structure
        batch_op.drop_index("ix_output_join_submission")
        batch_op.drop_index("ix_unique_output")
        batch_op.drop_constraint("fk_output_data_submission_id_submission_dim", type_="foreignkey")
        batch_op.drop_column("submission_id")

    with op.batch_alter_table("private_investment", schema=None) as batch_op:
        batch_op.drop_constraint("fk_private_investment_project_id_project_dim", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_private_investment_project_id_project_dim"),
            "project_dim",
            ["project_id"],
            ["id"],
            ondelete="CASCADE",
        )
        # Remove old FK structure
        batch_op.drop_index("ix_private_investment_join_submission")
        batch_op.drop_index("ix_unique_private_investment")
        batch_op.drop_constraint("fk_private_investment_submission_id_submission_dim", type_="foreignkey")
        batch_op.drop_column("submission_id")

    with op.batch_alter_table("project_progress", schema=None) as batch_op:
        batch_op.drop_constraint("fk_project_progress_project_id_project_dim", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_project_progress_project_id_project_dim"),
            "project_dim",
            ["project_id"],
            ["id"],
            ondelete="CASCADE",
        )
        # Remove old FK structure
        batch_op.drop_index("ix_project_progress_join_submission")
        batch_op.drop_index("ix_unique_project_progress")
        batch_op.drop_constraint("fk_project_progress_submission_id_submission_dim", type_="foreignkey")
        batch_op.drop_column("submission_id")

    session.commit()

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    with op.batch_alter_table("project_progress", schema=None) as batch_op:
        # re-instate old FK's
        batch_op.add_column(sa.Column("submission_id", sa.UUID(), autoincrement=False, nullable=False))
        batch_op.create_foreign_key(
            "fk_project_progress_submission_id_submission_dim",
            "submission_dim",
            ["submission_id"],
            ["id"],
            ondelete="CASCADE",
        )
        batch_op.create_index("ix_unique_project_progress", ["submission_id", "project_id"], unique=False)
        batch_op.create_index("ix_project_progress_join_submission", ["submission_id"], unique=False)
        # remove new FK's
        batch_op.drop_constraint(batch_op.f("fk_project_progress_project_id_project_dim"), type_="foreignkey")
        batch_op.create_foreign_key("fk_project_progress_project_id_project_dim", "project_dim", ["project_id"], ["id"])

    with op.batch_alter_table("private_investment", schema=None) as batch_op:
        # re-instate old FK's
        batch_op.add_column(sa.Column("submission_id", sa.UUID(), autoincrement=False, nullable=False))
        batch_op.create_foreign_key(
            "fk_private_investment_submission_id_submission_dim",
            "submission_dim",
            ["submission_id"],
            ["id"],
            ondelete="CASCADE",
        )
        batch_op.create_index("ix_unique_private_investment", ["submission_id", "project_id"], unique=False)
        batch_op.create_index("ix_private_investment_join_submission", ["submission_id"], unique=False)
        # remove new FK's
        batch_op.drop_constraint(batch_op.f("fk_private_investment_project_id_project_dim"), type_="foreignkey")
        batch_op.create_foreign_key(
            "fk_private_investment_project_id_project_dim", "project_dim", ["project_id"], ["id"]
        )

    with op.batch_alter_table("output_data", schema=None) as batch_op:
        # re-instate old FK's
        batch_op.add_column(sa.Column("submission_id", sa.UUID(), autoincrement=False, nullable=False))
        batch_op.create_foreign_key(
            "fk_output_data_submission_id_submission_dim",
            "submission_dim",
            ["submission_id"],
            ["id"],
            ondelete="CASCADE",
        )
        batch_op.create_index(
            "ix_unique_output",
            ["submission_id", "project_id", "output_id", "start_date", "end_date", "unit_of_measurement", "state"],
            unique=False,
        )
        batch_op.create_index("ix_output_join_submission", ["submission_id"], unique=False)
        # remove new FK's
        batch_op.drop_constraint(batch_op.f("fk_output_data_project_id_project_dim"), type_="foreignkey")
        batch_op.create_foreign_key("fk_output_data_project_id_project_dim", "project_dim", ["project_id"], ["id"])

    with op.batch_alter_table("funding_comment", schema=None) as batch_op:
        # re-instate old FK's
        batch_op.add_column(sa.Column("submission_id", sa.UUID(), autoincrement=False, nullable=False))
        batch_op.create_foreign_key(
            "fk_funding_comment_submission_id_submission_dim",
            "submission_dim",
            ["submission_id"],
            ["id"],
            ondelete="CASCADE",
        )
        batch_op.create_index("ix_unique_funding_comment", ["submission_id", "project_id"], unique=False)
        batch_op.create_index("ix_funding_comment_join_submission", ["submission_id"], unique=False)
        # remove new FK's
        batch_op.drop_constraint(batch_op.f("fk_funding_comment_project_id_project_dim"), type_="foreignkey")
        batch_op.create_foreign_key("fk_funding_comment_project_id_project_dim", "project_dim", ["project_id"], ["id"])

    with op.batch_alter_table("funding", schema=None) as batch_op:
        # re-instate old FK's
        batch_op.add_column(sa.Column("submission_id", sa.UUID(), autoincrement=False, nullable=False))
        batch_op.create_foreign_key(
            "fk_funding_submission_id_submission_dim", "submission_dim", ["submission_id"], ["id"], ondelete="CASCADE"
        )
        batch_op.create_index(
            "ix_unique_funding",
            [
                "submission_id",
                "project_id",
                "funding_source_name",
                "funding_source_type",
                "secured",
                "start_date",
                "end_date",
            ],
            unique=False,
        )
        batch_op.create_index("ix_funding_join_submission", ["submission_id"], unique=False)
        # remove new FK's
        batch_op.drop_constraint(batch_op.f("fk_funding_project_id_project_dim"), type_="foreignkey")
        batch_op.create_foreign_key("fk_funding_project_id_project_dim", "project_dim", ["project_id"], ["id"])

    with op.batch_alter_table("risk_register", schema=None) as batch_op:
        # re-instate old FK's
        batch_op.add_column(sa.Column("submission_id", sa.UUID(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column("programme_id", sa.UUID(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(
            "fk_risk_register_programme_id_programme_dim", "programme_dim", ["programme_id"], ["id"]
        )
        batch_op.create_foreign_key(
            "fk_risk_register_submission_id_submission_dim",
            "submission_dim",
            ["submission_id"],
            ["id"],
            ondelete="CASCADE",
        )
        batch_op.create_index(
            "ix_unique_risk_register", ["submission_id", "programme_id", "project_id", "risk_name"], unique=False
        )
        batch_op.create_index("ix_risk_register_join_submission", ["submission_id"], unique=False)
        batch_op.create_index("ix_risk_register_join_programme", ["programme_id"], unique=False)
        # remove new FK's
        batch_op.drop_constraint(
            batch_op.f("fk_risk_register_programme_junction_id_programme_junction"), type_="foreignkey"
        )
        batch_op.drop_index("ix_risk_register_join_programme_junction")
        batch_op.drop_column("programme_junction_id")
        batch_op.drop_constraint(batch_op.f("fk_risk_register_project_id_project_dim"), type_="foreignkey")
        batch_op.create_foreign_key("fk_risk_register_project_id_project_dim", "project_dim", ["project_id"], ["id"])

    with op.batch_alter_table("project_dim", schema=None) as batch_op:
        # re-instate old FK's
        batch_op.add_column(sa.Column("submission_id", sa.UUID(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column("programme_id", sa.UUID(), autoincrement=False, nullable=False))
        batch_op.create_foreign_key(
            "fk_project_dim_programme_id_programme_dim", "programme_dim", ["programme_id"], ["id"]
        )
        batch_op.create_foreign_key(
            "fk_project_dim_submission_id_submission_dim",
            "submission_dim",
            ["submission_id"],
            ["id"],
            ondelete="CASCADE",
        )
        batch_op.create_index("ix_unique_project_dim", ["submission_id", "project_id"], unique=False)
        batch_op.create_index("ix_project_join_submission", ["submission_id"], unique=False)
        batch_op.create_index("ix_project_join_programme", ["programme_id"], unique=False)
        # remove new FK's
        batch_op.drop_constraint(
            batch_op.f("fk_project_dim_programme_junction_id_programme_junction"), type_="foreignkey"
        )
        batch_op.drop_index("ix_unique_project_per_return_dim")
        batch_op.drop_index("ix_project_join_programme_junction")
        batch_op.drop_column("programme_junction_id")

    with op.batch_alter_table("programme_progress", schema=None) as batch_op:
        # re-instate old FK's
        batch_op.add_column(sa.Column("submission_id", sa.UUID(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column("programme_id", sa.UUID(), autoincrement=False, nullable=False))
        batch_op.create_foreign_key(
            "fk_programme_progress_programme_id_programme_dim", "programme_dim", ["programme_id"], ["id"]
        )
        batch_op.create_foreign_key(
            "fk_programme_progress_submission_id_submission_dim",
            "submission_dim",
            ["submission_id"],
            ["id"],
            ondelete="CASCADE",
        )
        batch_op.create_index("ix_unique_programme_progress", ["submission_id", "question"], unique=False)
        batch_op.create_index("ix_programme_progress_join_submission", ["submission_id"], unique=False)
        batch_op.create_index("ix_programme_progress_join_programme", ["programme_id"], unique=False)
        # remove new FK's
        batch_op.drop_constraint(
            batch_op.f("fk_programme_progress_programme_junction_id_programme_junction"), type_="foreignkey"
        )
        batch_op.drop_index("ix_unique_programme_progress_per_submission")
        batch_op.drop_index("ix_programme_progress_join_programme_junction")
        batch_op.drop_column("programme_junction_id")

    with op.batch_alter_table("place_detail", schema=None) as batch_op:
        # re-instate old FK's
        batch_op.add_column(sa.Column("submission_id", sa.UUID(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column("programme_id", sa.UUID(), autoincrement=False, nullable=False))
        batch_op.create_foreign_key(
            "fk_place_detail_submission_id_submission_dim",
            "submission_dim",
            ["submission_id"],
            ["id"],
            ondelete="CASCADE",
        )
        batch_op.create_foreign_key(
            "fk_place_detail_programme_id_programme_dim", "programme_dim", ["programme_id"], ["id"]
        )
        batch_op.create_index(
            "ix_unique_place_detail", ["submission_id", "programme_id", "question", "indicator"], unique=False
        )
        batch_op.create_index("ix_place_detail_join_submission", ["submission_id"], unique=False)
        batch_op.create_index("ix_place_detail_join_programme", ["programme_id"], unique=False)
        # remove new FK's
        batch_op.drop_constraint(
            batch_op.f("fk_place_detail_programme_junction_id_programme_junction"), type_="foreignkey"
        )
        batch_op.drop_index("ix_unique_place_detail_per_submission")
        batch_op.drop_index("ix_place_detail_join_programme_junction")
        batch_op.drop_column("programme_junction_id")

    with op.batch_alter_table("outcome_data", schema=None) as batch_op:
        # re-instate old FK's
        batch_op.add_column(sa.Column("submission_id", sa.UUID(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column("programme_id", sa.UUID(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(
            "fk_outcome_data_programme_id_programme_dim", "programme_dim", ["programme_id"], ["id"]
        )
        batch_op.create_foreign_key(
            "fk_outcome_data_submission_id_submission_dim",
            "submission_dim",
            ["submission_id"],
            ["id"],
            ondelete="CASCADE",
        )
        batch_op.create_index(
            "ix_unique_outcome",
            ["submission_id", "project_id", "outcome_id", "start_date", "end_date", "geography_indicator"],
            unique=False,
        )
        batch_op.create_index("ix_outcome_join_submission", ["submission_id"], unique=False)
        batch_op.create_index("ix_outcome_join_programme", ["programme_id"], unique=False)
        # remove new FK's
        batch_op.drop_constraint(
            batch_op.f("fk_outcome_data_programme_junction_id_programme_junction"), type_="foreignkey"
        )
        batch_op.drop_index("ix_outcome_join_programme_junction")
        batch_op.drop_column("programme_junction_id")
        batch_op.drop_constraint(batch_op.f("fk_outcome_data_project_id_project_dim"), type_="foreignkey")
        batch_op.create_foreign_key("fk_outcome_data_project_id_project_dim", "project_dim", ["project_id"], ["id"])

    with op.batch_alter_table("funding_question", schema=None) as batch_op:
        # re-instate old FK's
        batch_op.add_column(sa.Column("submission_id", sa.UUID(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column("programme_id", sa.UUID(), autoincrement=False, nullable=False))
        batch_op.create_foreign_key(
            "fk_funding_question_programme_id_programme_dim", "programme_dim", ["programme_id"], ["id"]
        )
        batch_op.create_foreign_key(
            "fk_funding_question_submission_id_submission_dim",
            "submission_dim",
            ["submission_id"],
            ["id"],
            ondelete="CASCADE",
        )
        batch_op.create_index(
            "ix_unique_funding_question", ["submission_id", "programme_id", "question", "indicator"], unique=False
        )
        batch_op.create_index("ix_funding_question_join_submission", ["submission_id"], unique=False)
        batch_op.create_index("ix_funding_question_join_programme", ["programme_id"], unique=False)
        # remove new FK's
        batch_op.drop_constraint(
            batch_op.f("fk_funding_question_programme_junction_id_programme_junction"), type_="foreignkey"
        )
        batch_op.drop_index("ix_unique_funding_question_per_submission")
        batch_op.drop_index("ix_funding_question_join_programme_junction")
        batch_op.drop_column("programme_junction_id")

    with op.batch_alter_table("programme_junction", schema=None) as batch_op:
        batch_op.drop_index("ix_programme_junction_join_submission")
        batch_op.drop_index("ix_programme_junction_join_programme")

    op.drop_table("programme_junction")
    # ### end Alembic commands ###
